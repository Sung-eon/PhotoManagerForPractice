// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhotoManager.Data;

#nullable disable

namespace PhotoManager.Data.PhotoMigrations
{
    [DbContext(typeof(PhotoDbContext))]
    [Migration("20220306164319_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AlbumArticle", b =>
                {
                    b.Property<Guid>("AlbumsAlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticlesArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AlbumsAlbumId", "ArticlesArticleId");

                    b.HasIndex("ArticlesArticleId");

                    b.ToTable("AlbumArticle");
                });

            modelBuilder.Entity("PhotoManager.Data.Album", b =>
                {
                    b.Property<Guid>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AlbumId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("PhotoManager.Data.Article", b =>
                {
                    b.Property<Guid>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Edit_time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Publish_time")
                        .HasColumnType("datetime2");

                    b.HasKey("ArticleId");

                    b.HasIndex("PhotoId")
                        .IsUnique();

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("PhotoManager.Data.ArticleTag", b =>
                {
                    b.Property<Guid>("ArticleTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleTagId");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleTags");
                });

            modelBuilder.Entity("PhotoManager.Data.CameraModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Maker")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Model_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Sensor_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Model_name", "Maker")
                        .IsUnique();

                    b.ToTable("CameraBodys");
                });

            modelBuilder.Entity("PhotoManager.Data.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Edit_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Publish_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentId");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PhotoManager.Data.History", b =>
                {
                    b.Property<Guid>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EventDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HistoryId");

                    b.HasIndex("ArticleId");

                    b.ToTable("Historys");
                });

            modelBuilder.Entity("PhotoManager.Data.LensModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Maker")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Max_aperture")
                        .HasColumnType("float");

                    b.Property<int>("Max_focal_length")
                        .HasColumnType("int");

                    b.Property<double>("Min_aperture")
                        .HasColumnType("float");

                    b.Property<int>("Min_focal_length")
                        .HasColumnType("int");

                    b.Property<string>("Model_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Model_name", "Maker")
                        .IsUnique();

                    b.ToTable("Lens");
                });

            modelBuilder.Entity("PhotoManager.Data.Photo", b =>
                {
                    b.Property<Guid>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Aperture")
                        .HasColumnType("float");

                    b.Property<int?>("Bit")
                        .HasColumnType("int");

                    b.Property<string>("Color_space")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Dpi")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Export_datetime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Exposure")
                        .HasColumnType("int");

                    b.Property<string>("Exposure_mode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exposure_program")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File_format")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File_path")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Focal_length")
                        .HasColumnType("float");

                    b.Property<double?>("Focal_length_in_35")
                        .HasColumnType("float");

                    b.Property<double?>("Gps_latitude")
                        .HasColumnType("float");

                    b.Property<string>("Gps_latitude_ref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Gps_longitude")
                        .HasColumnType("float");

                    b.Property<string>("Gps_longitude_ref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("Iso")
                        .HasColumnType("int");

                    b.Property<string>("Lens_model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Maker")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Metering_mode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Original_datetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Place_city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place_country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place_province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place_sublocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Shutter_speed")
                        .HasColumnType("float");

                    b.Property<string>("Shutter_speed_text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Software")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail_path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timezone_offset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("White_balance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("PhotoId");

                    b.HasIndex("Export_datetime");

                    b.HasIndex("File_path")
                        .IsUnique();

                    b.HasIndex("Model", "Maker");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("AlbumArticle", b =>
                {
                    b.HasOne("PhotoManager.Data.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoManager.Data.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoManager.Data.Article", b =>
                {
                    b.HasOne("PhotoManager.Data.Photo", "Photo")
                        .WithOne("Article")
                        .HasForeignKey("PhotoManager.Data.Article", "PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("PhotoManager.Data.ArticleTag", b =>
                {
                    b.HasOne("PhotoManager.Data.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("PhotoManager.Data.Comment", b =>
                {
                    b.HasOne("PhotoManager.Data.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("PhotoManager.Data.History", b =>
                {
                    b.HasOne("PhotoManager.Data.Article", "Article")
                        .WithMany("Historys")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("PhotoManager.Data.Article", b =>
                {
                    b.Navigation("ArticleTags");

                    b.Navigation("Comments");

                    b.Navigation("Historys");
                });

            modelBuilder.Entity("PhotoManager.Data.Photo", b =>
                {
                    b.Navigation("Article")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
