@page "/view/{image_id:guid}"

@using PhotoManager.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

@inject IDbContextFactory<PhotoDbContext> PhotoDb
@inject NavigationManager navigator
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> userManager
@inject IJSRuntime JS
@inject NavigationManager Navigator

@implements IDisposable
@implements IModal


@if (photo is not null)
{
    <PageTitle>[View] @photo.File_name - Photo Manager</PageTitle>
    <GoToTopButton Href="/directory" PreviousButton="true" />

    <div class="flex flex-col gap-6 divide-y">
        <div class="flex flex-col sm:flex-row gap-6">

            <!-- Left col -->
            <div class="p-3 basis-0 sm:basis-2/3 flex flex-col gap-6">
                <div>
                    <ImageViewer PhotoId="@photo.PhotoId" />
                </div>

                <div class="text-sky-600">
                    <h2 class="text-2xl font-medium mb-5">@photo.File_name</h2>

                    @if (IdenticalDateTime())
                    {
                        <DateTimeView _dateTime="photo.Original_datetime" />
                    }
                    else
                    {
                        <div class="flex flex-col lg:flex-row gap-3 md:gap-6 lg:gap-10">
                            <DateTimeView Title="Digitized datetime" _dateTime="photo.Original_datetime" />
                            <DateTimeView Title="Export datetime" _dateTime="photo.Export_datetime" />
                        </div>
                    }
                </div>

                <AuthorizeView Policy="AdminOnly">
                    @{
                        var AdminButtonStyle = "border text-center rounded py-2 w-full border-rose-400 text-rose-400 hover:bg-rose-400 hover:text-white";
                    }
                    <div class="flex gap-3">
                        <a class="@AdminButtonStyle" href="/admin/assets/photos/@photo.PhotoId">edit</a>
                        <button class="@AdminButtonStyle" @onclick="ChangeModalHiddenState">add to an album</button>
                        <a class="@AdminButtonStyle" href="/view/@photo.PhotoId/manipulate">Download</a>
                    </div>
                </AuthorizeView>

                <AuthorizeView Policy="AdminOnly" Context="Auth">
                    <Modal HiddenSwitch="@HiddenSwitch">
                        <Title>Add to an album</Title>
                        <Description>
                            <EditForm Model="albumSearchBoxInput" Context="AlbumSearch">
                                @{
                                    var AlbumNameTextBoxStyle = "px-3 py-2 border rounded text-gray-600 w-full";
                                    var CreateAlbumButton = "border rounded py-2 border-sky-400 text-gray-600 hover:bg-sky-400 hover:text-white";
                                }
                                <div class="flex flex-col gap-4 w-full">

                                    <div>
                                        <p class="font-medium mb-3">Album name</p>
                                        <InputText class="@AlbumNameTextBoxStyle" @bind-Value="albumSearchBoxInput.albumName" />
                                    </div>

                                    @if (article.Albums is null)
                                    {
                                        <p class="text-lg font-light">Congratulation!</p>
                                        <p class="text-gray-600">It is first time to create a new album </p>
                                        <button class="@CreateAlbumButton" @onclick="CreateNewAlbum">Create a new album</button>
                                    }
                                    else
                                    {
                                        var AlbumItems = article.Albums.Where(s => s.Name.Contains(albumSearchBoxInput.albumName));

                                        @if (albumSearchBoxInput.albumName is not null)
                                        {
                                            <div class="grid grid-cols-2 gap-3">
                                                @foreach (var item in AlbumItems)
                                                {
                                                    <div class="border rounded p-3">
                                                        <p>@item.Name</p>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <p class="text-gray-600">Write an album name to do a search</p>
                                        }
                                        <button class="@CreateAlbumButton" @onclick="CreateNewAlbum">Could not find the album? Create a new one!</button>
                                    }

                                    <p class="text-rose-400 font-medium">@AlbumSearchOrCreateAlertMessage</p>
                                </div>
                            </EditForm>
                        </Description>
                        <ModalButtons>
                            <button class="border rounded px-4 py-2" @onclick="ChangeModalHiddenState">Close</button>
                        </ModalButtons>
                    </Modal>
                </AuthorizeView>

                @{
                    var CardStyle = "border rounded p-3";
                }

                <div class="text-gray-500">
                    <h4 class="@ArticlePropertyTitleStyle">Stats</h4>
                    <div class="grid grid-cols-2 gap-3">
                        <div class="@CardStyle">
                            <h5>Views</h5>
                            <p class="text-sm text-gray-500">
                                @article.Historys.Where(s => s.Event == EventType.View).Count()
                            </p>
                        </div>
                        <div class="@CardStyle hover:border-rose-400 cursor-pointer">
                            <h5>Favorites</h5>
                            <p class="text-sm text-gray-500">
                                0
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right col -->
            <div class="p-3 basis-0 sm:basis-2/3">
                <div class="flex flex-col gap-6 text-gray-500">
                    <div>
                        <h4 class="@ArticlePropertyTitleStyle">Exif data</h4>
                        <div class="flex gap-3 text-sm flex-wrap">
                            <span class="@ExifDataTextStyle">Aperture: f/@String.Format("{0:F1}", photo.Aperture)</span>
                            <span class="@ExifDataTextStyle">Shutter speed: @photo.Shutter_speed_text sec</span>
                            @if (photo.Focal_length == photo.Focal_length_in_35)
                            {
                                <span class="@ExifDataTextStyle">Focal length: @photo.Focal_length mm</span>
                            }
                            else
                            {
                                <span class="@ExifDataTextStyle">Focal length (in 35mm): @photo.Focal_length (@photo.Focal_length_in_35) mm</span>
                            }
                            <span class="@ExifDataTextStyle">ISO: @photo.Iso</span>
                            <span class="@ExifDataTextStyle">Mode: @photo.Exposure_program</span>
                            <span class="@ExifDataTextStyle">White balance: @photo.White_balance</span>
                        </div>
                    </div>

                    <div>
                        <h4 class="@ArticlePropertyTitleStyle">Camera & Lens</h4>
                        <div class="flex gap-3 text-sm flex-wrap">
                            <span class="@ExifDataTextStyle">
                                <a class="text-gray-600" href="/directory/device/@photo.Maker/@photo.Model">
                                    Camera body: @photo.Model [by @photo.Maker]
                                </a>
                            </span>
                            <span class="@ExifDataTextStyle">Lens: @photo.Lens_model</span>
                        </div>
                    </div>

                    <div>
                        <h4 class="@ArticlePropertyTitleStyle">GPS & Place</h4>
                        @if (photo.Gps_latitude is null && photo.Gps_longitude is null)
                        {
                            <p class="text-sm text-gray-400">No GPS information is available</p>
                        }
                        else
                        {
                            <div class="flex gap-3 text-sm flex-wrap">
                                <span class="@ExifDataTextStyle" real-value="@photo.Gps_latitude">Latitude : @String.Format("{0:F5}", photo.Gps_latitude) (@photo.Gps_latitude_ref)</span>
                                <span class="@ExifDataTextStyle" real-value="@photo.Gps_longitude">Latitude : @String.Format("{0:F5}", photo.Gps_longitude) (@photo.Gps_longitude_ref)</span>
                                @if (photo.Place_country is not null)
                                {
                                    <span class="@ExifDataTextStyle">Country: @photo.Place_country</span>
                                }
                                @if (photo.Place_province is not null)
                                {
                                    <span class="@ExifDataTextStyle">Province: @photo.Place_province</span>
                                }
                                @if (photo.Place_city is not null)
                                {
                                    <span class="@ExifDataTextStyle">City: @photo.Place_city</span>
                                }
                            </div>
                        }
                    </div>

                    <div>
                        <h4 class="@ArticlePropertyTitleStyle">Tags</h4>
                        @if (article.ArticleTags is not null)
                        {
                            @if (article.ArticleTags.Any())
                            {
                                <div class="flex flex-wrap gap-3">
                                    @foreach (var item in article.ArticleTags)
                                    {
                                        <a class="border rounded py-1 text-center text-sm text-gray-600 px-3">@item.Name</a>
                                    }
                                </div>
                            }
                            else
                            {
                                <p class="text-sm text-gray-400">No tags added</p>
                            }
                        }
                        else
                        {
                            <p class="text-sm text-gray-400">Could not retrieve tags from the database</p>
                        }
                    </div>

                    <div>
                        <h4 class="@ArticlePropertyTitleStyle">Albums</h4>
                        @if (article.Albums is not null)
                        {
                            @if (article.Albums.Any())
                            {
                                <div class="flex flex-wrap gap-3">
                                    @foreach (var item in article.Albums)
                                    {
                                        <a href="/directory/album/@item.Name"
                                           class="border rounded py-2 text-center text-sm text-gray-600 px-4 hover:bg-sky-400 hover:text-white">
                                            @item.Name
                                        </a>
                                    }
                                </div>
                            }
                            else
                            {
                                <p class="text-sm text-gray-400">No albums added</p>
                            }
                        }
                        else
                        {
                            <p class="text-sm text-gray-400">Could not retrieve albums from the database</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="p-3">
            <div class="text-gray-500">
                <h4 class="mb-3 text-lg font-semibold">Comments</h4>
            </div>

            <div class="mb-6">
                @if (article.Comments is not null)
                {
                    @if (!article.Comments.Any())
                    {
                        <i class="text-gray-400">No comments exist here</i>
                    }
                    else
                    {
                        <div class="flex flex-col gap-6">
                            @foreach (Comment comment in article.Comments)
                            {
                                <div class="border flex flex-col sm:flex-row p-3">
                                    <div class="sm:basis-1/3 lg:basis-1/4">
                                        <div class="mb-4">
                                            <h6 class="text-lg font-medium mb-3">@comment.Author</h6>
                                            <p class="text-gray-400 text-xs">@comment.Publish_time.ToLongDateString()</p>
                                            <p class="text-gray-400 text-xs">@comment.Publish_time.ToShortTimeString()</p>
                                        </div>
                                        @if (comment.Password is not null || comment.UserId == userId)
                                        {
                                            <button class="border rounded border-sky-400 px-4 py-1 text-sm" 
                                            @onclick="() => OpenCommentModalHiddenState(comment)">Edit</button>
                                        }
                                    </div>
                                    <div class="sm:basis-2/3 lg:basis-3/4 text-gray-600">
                                        <p>@comment.Content</p>
                                    </div>
                                </div>
                            }
                        </div>
                    }

                    @if(EditInProgressComment is not null)
                    {
                        <Modal HiddenSwitch="@HiddenCommentModalSwitch" ShowCloseButton="false">
                            <Title>
                                <h4>Edit / Delete the comment</h4>
                            </Title>
                            <Description>
                                <EditForm Model="EditInProgressComment">
                                    <div class="w-full">
                                        <h5 class="text-gray-500 font-medium mb-3">Password</h5>
                                        <InputText type="password" class="p-2 border rounded w-full" @bind-Value="EditInProgressComment.Password" />
                                    </div>
                                    <InputTextArea @bind-Value="EditInProgressComment.Content" class="p-3 border rounded w-full h-32" />
                                </EditForm>
                            </Description>
                            <ModalButtons>
                                <button>Edit</button>
                                <button>Delete</button>
                                <button @onclick="CloseCommentModalHiddenState">Close</button>
                            </ModalButtons>
                        </Modal>
                    }
                }
            </div>

            <EditForm Model="newComment" OnValidSubmit="RegisterComment">
                <input type="hidden" @bind="newComment.CommentId" />
                <div class="flex flex-col gap-3 px-5 py-3 border rounded">
                    <AuthorizeView Context="Auth">
                        <NotAuthorized>
                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-6">
                                <div class="w-full">
                                    <h5 class="text-gray-500 font-medium mb-3">Commenter</h5>
                                    <InputText class="p-2 border rounded w-full" @bind-Value="newComment.Author" />
                                </div>
                                <div class="w-full">
                                    <h5 class="text-gray-500 font-medium mb-3">Password</h5>
                                    <InputText type="password" class="p-2 border rounded w-full" @bind-Value="newComment.Password" />
                                </div>
                            </div>
                        </NotAuthorized>
                    </AuthorizeView>
                    <h5 class="text-gray-500 font-medium">Comment body</h5>
                    <InputTextArea @bind-Value="newComment.Content"
                                   class="p-3 border rounded w-full h-32" />

                    @if (CommentRegisterErrorMessage is not null)
                    {
                        <p class="text-rose-400">@CommentRegisterErrorMessage</p>
                    }
                    <div class="grid grid-cols-2 divide-x text-sm border rounded">
                        <button class="py-2 hover:bg-sky-400 hover:text-white text-gray-600">Comment</button>
                        <button class="py-2 hover:bg-rose-400 hover:text-white text-gray-600" @onclick="ResetComment">Reset</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {

    [Parameter] public Guid image_id { get; set; }

    private PhotoDbContext? photoDbContext;
    private Photo? photo;
    private Article? article;
    private Comment newComment = new Comment();

    private bool HiddenSwitch { get; set; } = true;
    private bool HiddenCommentModalSwitch { get; set; } = true; 
    private Comment? EditInProgressComment { get; set; }

    private string? CommentRegisterErrorMessage { get; set; }
    private string? username { get; set; }
    private string? userId { get; set; }


    private string ExifDataTextStyle = "border rounded p-2";

    protected override void OnInitialized()
    {
        try
        {
            photoDbContext = PhotoDb.CreateDbContext();

            photo = photoDbContext.Photos.Single(s => s.PhotoId == image_id);
            
            article = photoDbContext.Articles
            .Include(s => s.Albums)
            .Include(s => s.ArticleTags)
            .Include(s => s.Comments)
            .Include(s => s.Historys)
            .AsSplitQuery()
            .Single(s => s.PhotoId == image_id);

            this.newComment.ArticleId = article.ArticleId;

            base.OnInitialized();
        }
        catch
        {
            navigator.NavigateTo("/view/not_found");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            username = authState.User.Identity.Name;
            IdentityUser user = await userManager.FindByNameAsync(username);
            userId = user.Id;
        }
        catch
        {
            username = "anonymous";
            userId = "anonymous";
        }
        finally
        {
            await base.OnParametersSetAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("ScrollToTop");

            // To retrieve new comment model
            ResetComment();

            UpdateHistory();

        }
        base.OnAfterRender(firstRender);
    }

    private async void UpdateHistory()
    {
        History history = new History() {
            UserId = username == "anonymous" ? "anonymous" : username,
            Event = EventType.View,
            ArticleId = article.ArticleId
        };

        await photoDbContext.AddAsync(history);

        await photoDbContext.SaveChangesAsync();
    }

    public void Dispose()
    {
        photoDbContext = null;
        photo = null;
        article = null;
    }
}






