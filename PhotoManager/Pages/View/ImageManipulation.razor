@page "/view/{image_id:guid}/manipulate"

@attribute [Authorize(Policy = "AdminOnly")]

@using Microsoft.EntityFrameworkCore
@using PhotoManager.Data

@inject IDbContextFactory<PhotoDbContext> PhotoDb
@inject NavigationManager Navigator
@inject IJSRuntime JS

@implements IDisposable

<PageTitle>[Image download] @photo.File_name - Photo Manager</PageTitle>
<PageHeadTitle TitleContent="Image download" />

<GoToTopButton Href="/view/{image_id:guid}" PreviousButton="true" />

<div class="flex md:flex-row gap-6">
    <div class="md:basis-2/3">
        <h2 class="text-3xl font-light mb-3">Preview</h2>
        <img class="w-full object-cover" src="/thumbnail/@photo.PhotoId/preview_2x.webp" />
    </div>
    <div class="basis-1/3 p-5">
        <EditForm Model="manipulateOption">
            <div class="flex flex-col gap-3">
                <div>
                    <h5>Width</h5>
                    <InputNumber class="border rounded w-full p-3 text-gray-500" @bind-Value="manipulateOption.Width" />
                </div>

                <div>
                    <h5>Height</h5>
                    <InputNumber class="border rounded w-full p-3 text-gray-500" @bind-Value="manipulateOption.Height" />
                </div>

                <div>
                    <h5>Export as</h5>
                    <InputSelect class="border rounded w-full p-3 text-gray-500" @bind-Value="manipulateOption.ExportAs">
                        <option value="jpg" selected>jpg</option>
                        <option value="png">png</option>
                        <option value="webp">webp</option>
                    </InputSelect>
                </div>
            </div>
        </EditForm>
        @{
            var param = new Dictionary<string, string>() {
                { "PhotoId", photo.PhotoId.ToString() },
                { "Width", manipulateOption.Width.ToString() },
                { "Height", manipulateOption.Height.ToString() },
                { "Format", manipulateOption.ExportAs }
            };
            var encodedURL = new FormUrlEncodedContent(param).ReadAsStringAsync();
            encodedURL.Wait();

            var DownloadLink = Navigator.ToAbsoluteUri(
                $"/api/v1/image/Manipulation/GetLink?{encodedURL.Result}"
                );
        }
        <button class="border-cyan-600 text-cyan-600 border rounded w-full px-3 py-1" 
        @onclick="() => DownloadImage(DownloadLink)">Download</button>
    </div>
</div>

@code {

    [Parameter] public Guid image_id { get; set; }
    private PhotoDbContext? photoDbContext;
    private Photo? photo;

    private class ManipulateOption
    {
        public int Width { get; set; }
        public int Height { get; set; }
        public string ExportAs { get; set; }
    }
    private ManipulateOption manipulateOption = new();

    protected override void OnInitialized()
    {
        photoDbContext = PhotoDb.CreateDbContext();
        try
        {
            photo = photoDbContext.Photos.Single(s => s.PhotoId == image_id);
        }
        catch (InvalidOperationException)
        {
            Navigator.NavigateTo("/view/not_found");
        }
        finally
        {
            manipulateOption.Width = photo.Width;
            manipulateOption.Height = photo.Height;

            base.OnInitialized();
        }
    }

    private async void DownloadImage(Uri url)
    {
        Console.WriteLine(url.AbsoluteUri);
        await JS.InvokeVoidAsync("DownloadPhoto", url.AbsoluteUri);
    }

    public void Dispose()
    {
        photoDbContext = null;
        photo = null;
    }
}    